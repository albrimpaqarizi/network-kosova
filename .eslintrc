{
  "env": {
    "browser": true,
    "react-native/react-native": true
  },
  "extends": [
    "eslint:recommended",
    "airbnb",
    "airbnb/hooks",
    "plugin:prettier/recommended",
    "plugin:react-native/all",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/typescript"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": ["./tsconfig.json"]
  },

  "plugins": [
    "react",
    "@typescript-eslint",
    "prettier",
    "react-native",
    "simple-import-sort",
    "import"
  ],
  "settings": {
    "react-native/style-sheet-object-names": ["EStyleSheet", "OtherStyleSheet", "PStyleSheet"],
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`

        // Choose from one of the "project" configs below or omit to use <root>/tsconfig.json by default

        // use <root>/path/to/folder/tsconfig.json
        "project": ["./tsconfig.json"]
      }
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    }
  },
  "rules": {
    //
    //  React Native RULES
    //
    // React Native specific linting rules for ESLint
    "react-native/no-unused-styles": 2,
    "react-native/split-platform-components": 2,
    "react-native/no-inline-styles": 2,
    "react-native/no-color-literals": 2,
    "react-native/no-raw-text": "off",
    "react-native/no-single-element-style-arrays": 2,
    "react-native/sort-styles": [
      "warn",
      "asc",
      { "ignoreClassNames": true, "ignoreStyleProperties": false }
    ],
    //
    //  ESLINT RULES
    //
    // limits objects if enabled but part of recommaded plugin
    "no-prototype-builtins": "off",
    // used still for debuging
    "no-console": "off",
    // do not allow fn params reassign
    "no-param-reassign": "error",
    // should alwys use template
    "prefer-template": "error",
    // not always needed
    "arrow-parens": "off",
    // as needed
    "arrow-body-style": ["error", "as-needed"],
    // warn if function does not have a name
    "func-names": "warn",
    // error out if condition is constant
    "no-constant-condition": "error",
    // limits objects if enabled but part of recommaded plugin
    // disables nasty underscore dangle
    "no-underscore-dangle": "error",
    "import/no-named-as-default": 0,
    "import/no-duplicates": ["warn", { "considerQueryString": true }],
    "react/jsx-props-no-spreading": "off",
    "react/no-unescaped-entities": "off",
    "react/require-default-props": "off",
    // will save us debuging time
    "nonblock-statement-body-position": "error",
    // this will allow both named and arrow functions as callbacks
    "prefer-arrow-callback": ["error", { "allowNamedFunctions": true }],
    // dissabled ts will handle them
    "dot-notation": "off",
    "no-use-before-define": "off",
    "no-implied-eval": "off",
    "no-throw-literal": "off",
    "no-return-await": "off",
    "react/jsx-filename-extension": "off",
    "comma-dangle": "off",
    "no-unused-vars": "off",
    // consistent with prettier
    "max-len": [
      "warn",
      {
        "code": 100,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreComments": true
      }
    ],
    // forced but not everywhere
    "camelcase": [
      "error",
      {
        // react
        "allow": ["^UNSAFE_"],
        "properties": "never",
        "ignoreGlobals": true,
        "ignoreImports": true,
        // sometimes needed from api
        "ignoreDestructuring": true
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "args": "none",
        "caughtErrors": "none"
      }
    ],
    //
    // Prettier rules
    //
    "prettier/prettier": [
      "warn",
      {},
      {
        "usePrettierrc": true
      }
    ],
    //
    //  IMPORT RULES
    //
    // does not play well with our style guides
    "import/prefer-default-export": "off",
    "import/no-default-export": "off",
    // bad for monorepo arch
    "import/no-extraneous-dependencies": "off",
    // makes grouping harder
    "import/newline-after-import": "warn",
    // make sure imports are resolved
    // "import/no-unresolved": [2, { "caseSensitive": false }],
    "import/no-unresolved": "warn",
    "import/no-cycle": [2, { "maxDepth": 1 }],
    // makes code cleaner this way
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "ts": "never",
        "tsx": "never",
        "js": "never",
        "jsx": "never"
      }
    ],
    // easy autofixable import sorting with eslint-plugin-simple-import-sort
    "simple-import-sort/imports": "off",
    "simple-import-sort/exports": "warn",
    "import/order": "off"
    // "overrides": [
    //   {
    //     "files": "src/**.tsx",
    //     "rules": {
    //       "import/order": "off"
    //     }
    //   }
    // ]
  }
}
